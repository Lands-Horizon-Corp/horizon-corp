services:
  client:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - ./client:/client
      - /client/node_modules
    ports:
      - "${CLIENT_FORWARD_PORT}:${CLIENT_PORT}"
    environment:
      - "VITE_CLIENT_FORWARD_PORT=${CLIENT_FORWARD_PORT}"
      - "VITE_CLIENT_PORT=${CLIENT_PORT}"
      - "VITE_CLIENT_SERVER_URL=${CLIENT_SERVER_URL}"
      - "VITE_CLIENT_DOCUMENT_URL=${CLIENT_DOCUMENT_URL}"

  vitepress:
    build:
      context: ./document
      dockerfile: Dockerfile
    ports:
      - "${DOCUMENT_FORWARD_PORT}:${DOCUMENT_PORT}"
    volumes:
      - ./document:/document
      - /document/node_modules
    environment:
      - "DOCUMENT_FORWARD_PORT=${DOCUMENT_FORWARD_PORT}"
      - "DOCUMENT_PORT=${DOCUMENT_PORT}"
      - "DOCUMENT_SERVER_URL=${DOCUMENT_SERVER_URL}"

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - ./server:/app
    ports:
      - "${APP_PORT}:${APP_FORWARD_PORT}"
    environment:
      - APP_PORT=${APP_PORT}
      - APP_TOKEN=${APP_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_CHARSET=${DB_CHARSET}
      - DB_PARSE_TIME=${DB_PARSE_TIME}
      - DB_LOC=${DB_LOC}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - STORAGE_REGION=${STORAGE_REGION}
      - STORAGE_ACCESS_KEY=${STORAGE_ACCESS_KEY}
      - STORAGE_SECRET_KEY=${STORAGE_SECRET_KEY}
      - STORAGE_BUCKET_NAME=${STORAGE_BUCKET_NAME}
      - STORAGE_MAX_FILE_SIZE=${STORAGE_MAX_FILE_SIZE}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_DB=${CACHE_DB}STORAGE_ENDPOINT
      - CACHE_URL=${CACHE_URL}
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: lands-horizon-db
    image: mysql:8.4
    platform: linux/amd64
    restart: always
    env_file: ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD:
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysql",
          "--user=${DB_USERNAME}",
          "--password=${DB_PASSWORD}",
          "--execute=SELECT 1",
        ]
      interval: 20s
      retries: 10
      start_period: 60s
      timeout: 20s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    platform: linux/amd64
    env_file: ./.env
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
      - PMA_USER=${DB_USERNAME}
      - PMA_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db

  flyway:
    build:
      context: ./migration
      dockerfile: Dockerfile
    env_file: ./.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_CHARSET: ${DB_CHARSET}
      DB_PARSE_TIME: ${DB_PARSE_TIME}
    entrypoint: ["flyway", "migrate"]

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "9000:9000"
      - "38813:38813"
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":38813"

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "${CACHE_PORT:-6379}:${CACHE_PORT:-6379}"
    environment:
      - REDIS_PASSWORD=${CACHE_PASSWORD}
    volumes:
      - redis_data:/data

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: always
    ports:
      - "8001:8001"
    environment:
      - REDISINSIGHT_REDIS_HOST=redis
      - REDISINSIGHT_REDIS_PORT=${CACHE_PORT:-6379}
      - REDISINSIGHT_REDIS_PASSWORD=${CACHE_PASSWORD}

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${EMAIL_PORT:-1025}:${EMAIL_PORT:-1025}"
      - "8025:8025"

volumes:
  db_data:
  minio_data:
  node_modules:
  redis_data:
