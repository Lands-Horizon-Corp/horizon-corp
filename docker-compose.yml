services:
  client:
    restart: always
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "${CLIENT_FORWARD_PORT}:${CLIENT_PORT}"
    environment:
      - CLIENT_FORWARD_PORT=${CLIENT_FORWARD_PORT}
      - CLIENT_PORT=${CLIENT_PORT}
      - CLIENT_SERVER_URL=${CLIENT_SERVER_URL}
    depends_on:
      - server
    env_file: ./.env
    volumes:
      - ./client:/app

  server:
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./.env
    volumes:
      - ./server:/app
    ports:
      - "${SERVER_PORT}:${SERVER_FORWARD_PORT}"
    environment:
      - DB_USERNAME=${SERVER_DB_USERNAME}
      - DB_PASSWORD=${SERVER_DB_PASSWORD}
      - DB_HOST=${SERVER_DB_HOST}
      - DB_PORT=${SERVER_DB_PORT}
      - DB_NAME=${SERVER_DB_NAME}
      - DB_CHARSET=${SERVER_DB_CHARSET}
      - DB_PARSE_TIME=${SERVER_DB_PARSE_TIME}
      - DB_LOC=${SERVER_DB_LOC}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql:8
    platform: linux/amd64
    restart: always
    env_file: ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${SERVER_DB_PASSWORD}
      MYSQL_DATABASE: ${SERVER_DB_NAME}
      MYSQL_USER: ${SERVER_DB_USERNAME}
      MYSQL_PASSWORD: ${SERVER_DB_PASSWORD}
    ports:
      - "${SERVER_DB_PORT}:${SERVER_DB_PORT}"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${SERVER_DB_PASSWORD}",
        ]
      interval: 20s
      retries: 10
      start_period: 60s
      timeout: 20s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    platform: linux/amd64
    env_file: ./.env
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
      - PMA_USER=${SERVER_DB_USERNAME}
      - PMA_PASSWORD=${SERVER_DB_PASSWORD}
    depends_on:
      - db

  flyway:
    build:
      context: ./migration
      dockerfile: Dockerfile
    env_file: ./.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      SERVER_DB_HOST: db
      SERVER_DB_PORT: ${SERVER_DB_PORT}
      SERVER_DB_USERNAME: ${SERVER_DB_USERNAME}
      SERVER_DB_PASSWORD: ${SERVER_DB_PASSWORD}
      SERVER_DB_NAME: ${SERVER_DB_NAME}
      SERVER_DB_CHARSET: ${SERVER_DB_CHARSET}
      SERVER_DB_PARSE_TIME: ${SERVER_DB_PARSE_TIME}
    entrypoint: ["flyway", "migrate"]

volumes:
  db_data:
